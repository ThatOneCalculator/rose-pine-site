<script>
	import Alpine from "alpinejs";
	import focus from "@alpinejs/focus";
	import { roles, roleKeys } from "@rose-pine/palette";
	import { themes } from "$data/themes";

	Alpine.plugin(focus);

	Alpine.store("commandOpen", false);

	Alpine.data("command", () => ({
		init() {
			this.commandItemsReorganize();
			this.commandSearchItems();
			this.$watch("commandSearch", () => this.commandSearchItems());
			this.$watch("commandItemSelected", function (item) {
				if (item.href) {
					window.location.href = item.href;
				}
			});
		},

		commandItems: {
			pages: [
				{
					title: "Home",
					value: "home",
					href: "/",
					icon: "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='w-4 h-4 mr-2'><rect width='18' height='18' x='3' y='4' rx='2' ry='2'></rect><line x1='16' x2='16' y1='2' y2='6'></line><line x1='8' x2='8' y1='2' y2='6'></line><line x1='3' x2='21' y1='10' y2='10'></line></svg>",
					default: true,
				},
				{
					title: "Themes",
					value: "themes",
					href: "/themes",
					icon: "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='w-4 h-4 mr-2'><circle cx='12' cy='12' r='10'></circle><path d='M8 14s1.5 2 4 2 4-2 4-2'></path><line x1='9' x2='9.01' y1='9' y2='9'></line><line x1='15' x2='15.01' y1='9' y2='9'></line></svg>",
					default: true,
				},
				{
					title: "Palette",
					value: "palette",
					href: "/palette",
					icon: "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='w-4 h-4 mr-2'><rect width='16' height='20' x='4' y='2' rx='2'></rect><line x1='8' x2='16' y1='6' y2='6'></line><line x1='16' x2='16' y1='14' y2='18'></line><path d='M16 10h.01'></path><path d='M12 10h.01'></path><path d='M8 10h.01'></path><path d='M12 14h.01'></path><path d='M8 14h.01'></path><path d='M12 18h.01'></path><path d='M8 18h.01'></path></svg>",
					default: true,
				},
				{
					title: "Swatches",
					value: "swatches",
					href: "/palette",
					icon: "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='w-4 h-4 mr-2'><rect width='16' height='20' x='4' y='2' rx='2'></rect><line x1='8' x2='16' y1='6' y2='6'></line><line x1='16' x2='16' y1='14' y2='18'></line><path d='M16 10h.01'></path><path d='M12 10h.01'></path><path d='M8 10h.01'></path><path d='M12 14h.01'></path><path d='M8 14h.01'></path><path d='M12 18h.01'></path><path d='M8 18h.01'></path></svg>",
					default: false,
				},
				{
					title: "Ingredients",
					value: "ingredients",
					href: "/palette/ingredients",
					icon: "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='w-4 h-4 mr-2'><rect width='16' height='20' x='4' y='2' rx='2'></rect><line x1='8' x2='16' y1='6' y2='6'></line><line x1='16' x2='16' y1='14' y2='18'></line><path d='M16 10h.01'></path><path d='M12 10h.01'></path><path d='M8 10h.01'></path><path d='M12 14h.01'></path><path d='M8 14h.01'></path><path d='M12 18h.01'></path><path d='M8 18h.01'></path></svg>",
					default: false,
				},
				{
					title: "Resources",
					value: "resources",
					href: "/resources",
					icon: "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='w-4 h-4 mr-2'><rect width='16' height='20' x='4' y='2' rx='2'></rect><line x1='8' x2='16' y1='6' y2='6'></line><line x1='16' x2='16' y1='14' y2='18'></line><path d='M16 10h.01'></path><path d='M12 10h.01'></path><path d='M8 10h.01'></path><path d='M12 14h.01'></path><path d='M8 14h.01'></path><path d='M12 18h.01'></path><path d='M8 18h.01'></path></svg>",
					default: true,
				},
			],
			themes: themes.map((theme) => ({
				title: theme.name,
				value: theme.name.replaceAll(" ", "-").toLowerCase(),
				href: theme.url,
				icon: "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='w-4 h-4 mr-2'><rect width='16' height='20' x='4' y='2' rx='2'></rect><line x1='8' x2='16' y1='6' y2='6'></line><line x1='16' x2='16' y1='14' y2='18'></line><path d='M16 10h.01'></path><path d='M12 10h.01'></path><path d='M8 10h.01'></path><path d='M12 14h.01'></path><path d='M8 14h.01'></path><path d='M12 18h.01'></path><path d='M8 18h.01'></path></svg>",
				default: theme.featured,
			})),
			palette: roleKeys.map((role) => ({
				title: roles[role].name,
				value: roles[role].name.replaceAll(" ", "-").toLowerCase(),
				href: `/palette#${roles[role].id}`,
				icon: `<div class="mr-2 w-5 h-5 flex items-center justify-center"><div class="w-3.5 h-3.5 border-[1.5px] rounded-full" style="background: hsl(var(--color-${roles[role].id}))"></div></div>`,
				default: ["love", "gold", "rose", "pine", "foam", "iris"].includes(
					role
				),
			})),
			community: [
				{
					title: "GitHub",
					value: "github",
					href: "https://github.com/rose-pine",
					icon: "BrandGithubFilled",
					default: true,
				},
				{
					title: "Discord",
					value: "discord",
					href: "https://discord.gg/r6wf35KVJW",
					icon: "BrandDiscordFilled",
					default: true,
				},
				{
					title: "Twitter",
					value: "twitter",
					href: "https://twitter.com/rosepinetheme",
					icon: "BrandTwitterFilled",
					default: true,
				},
			],
		},
		commandItemsFiltered: [],
		commandItemActive: null,
		commandItemSelected: null,
		commandSearch: "",
		commandSearchIsEmpty() {
			return this.commandSearch.length == 0;
		},
		commandItemIsActive(item) {
			return (
				this.commandItemActive && this.commandItemActive.value == item.value
			);
		},
		commandItemActiveNext() {
			let index = this.commandItemsFiltered.indexOf(this.commandItemActive);
			if (index < this.commandItemsFiltered.length - 1) {
				this.commandItemActive = this.commandItemsFiltered[index + 1];
				this.commandScrollToActiveItem();
			}
		},
		commandItemActivePrevious() {
			let index = this.commandItemsFiltered.indexOf(this.commandItemActive);
			if (index > 0) {
				this.commandItemActive = this.commandItemsFiltered[index - 1];
				this.commandScrollToActiveItem();
			}
		},
		commandScrollToActiveItem() {
			if (this.commandItemActive) {
				const activeElement = document.getElementById(
					this.commandItemActive.value + "-" + this.commandId
				);
				if (!activeElement) return;

				const newScrollPos =
					activeElement.offsetTop +
					activeElement.offsetHeight -
					this.$refs.commandItemsList.offsetHeight;
				if (newScrollPos > 0) {
					this.$refs.commandItemsList.scrollTop = newScrollPos;
				} else {
					this.$refs.commandItemsList.scrollTop = 0;
				}
			}
		},
		commandSearchItems() {
			if (!this.commandSearchIsEmpty()) {
				const searchTerm = this.commandSearch.replace(/\\*/g, "").toLowerCase();
				this.commandItemsFiltered = this.commandItems.filter((item) =>
					item.title.toLowerCase().startsWith(searchTerm)
				);

				this.commandScrollToActiveItem();
			} else {
				this.commandItemsFiltered = this.commandItems.filter(
					(item) => item.default
				);
			}
			this.commandItemActive = this.commandItemsFiltered[0];
		},
		commandShowCategory(item, index) {
			if (index === 0) return true;
			if (typeof this.commandItems[index - 1] === "undefined") return false;
			return item.category != this.commandItems[index - 1].category;
		},
		commandCategoryCapitalize(string) {
			return string.charAt(0).toUpperCase() + string.slice(1);
		},
		commandItemsReorganize() {
			const commandItemsOriginal = this.commandItems;
			const keys = Object.keys(this.commandItems);
			this.commandItems = [];
			keys.forEach((key, index) => {
				for (let i = 0; i < commandItemsOriginal[key].length; i++) {
					commandItemsOriginal[key][i].category = key;
					this.commandItems.push(commandItemsOriginal[key][i]);
				}
			});
		},
	}));

	Alpine.start();
</script>

<!-- TODO: Unable to $watch a $store value -->
<div
	x-init="
        $watch('$store.commandOpen', function(value){
            if(value === true){
                document.body.classList.add('overflow-hidden');
                $nextTick(() => { window.dispatchEvent(new CustomEvent('command-input-focus', {})); });
            }else{
                document.body.classList.remove('overflow-hidden');
            }
        })
    "
	@keydown.escape.window="$store.commandOpen = false"
	class="relative z-50 h-auto w-auto"
>
	<template x-teleport="body">
		<div
			x-show="$store.commandOpen"
			class="fixed left-0 top-0 z-[99] flex h-screen w-screen items-center justify-center"
			x-cloak
		>
			<div
				x-show="$store.commandOpen"
				x-transition:leave="ease-in duration-200"
				x-transition:leave-start="opacity-100"
				x-transition:leave-end="opacity-0"
				@click="$store.commandOpen=false"
				class="absolute inset-0 h-full w-full bg-black/10 backdrop-blur-sm"
			>
			</div>
			<div
				x-show="$store.commandOpen"
				x-trap.inert.noscroll="$store.commandOpen"
				x-transition:leave="ease-in duration-100"
				x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
				x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
				x-data="command"
				@keydown.down="event.preventDefault(); commandItemActiveNext()"
				@keydown.up="event.preventDefault(); commandItemActivePrevious();"
				@keydown.meta.k.window="event.preventDefault(); $store.commandOpen = ! $store.commandOpen"
				@keydown.enter="commandItemSelected = commandItemActive;"
				@command-input-focus.window="$refs.commandInput.focus();"
				class="relative flex min-h-[370px] w-full max-w-xl items-start justify-center"
				x-cloak
			>
				<div
					class="flex h-full w-full flex-col overflow-hidden rounded-xl border bg-surface/90 shadow-md drop-shadow-md backdrop-blur-sm"
				>
					<div class="flex items-center border-b px-3">
						<svg
							class="mr-0 h-4 w-4 shrink-0 text-muted"
							xmlns="http://www.w3.org/2000/svg"
							width="24"
							height="24"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
						>
							<circle cx="11" cy="11" r="8"></circle>
							<line x1="21" x2="16.65" y1="21" y2="16.65"></line>
						</svg>
						<input
							type="text"
							x-ref="commandInput"
							x-model="commandSearch"
							class="flex h-12 w-full rounded-md border-0 bg-transparent px-2 py-3 outline-none placeholder:text-subtle focus:border-0 focus:outline-none focus:ring-0 disabled:cursor-not-allowed disabled:opacity-50 sm:text-sm"
							placeholder="Search pages, themes and palette..."
							autocomplete="off"
							autocorrect="off"
							spellcheck="false"
						/>
						<button
							@click="$store.commandOpen=false"
							class="flex h-6 items-center justify-center rounded-lg border border-muted/20 bg-muted/10 px-1.5 text-subtle transition hover:bg-muted/20 focus:outline-none focus:ring"
						>
							<kbd
								class="pointer-events-none font-mono text-[11px] font-semibold uppercase"
							>
								esc
							</kbd>
						</button>
					</div>
					<div
						x-ref="commandItemsList"
						class="max-h-[320px] overflow-y-auto overflow-x-hidden"
					>
						<template x-if="commandItemsFiltered.length === 0">
							<div class="p-3">
								<p class="pb-6 pt-3 text-center text-sm">No results found.</p>

								<div
									class="divide-y overflow-hidden rounded-xl border bg-muted/5"
								>
									<a
										href="/themes"
										class="group flex items-center space-x-2 p-3 text-sm text-subtle transition first:rounded-t-xl last:rounded-b-xl hover:bg-muted/20 focus:outline-none focus:ring focus:ring-inset"
									>
										<span class="transition group-hover:text-text">
											Browse all themes
										</span>

										<div class="flex-1"></div>

										<span class="text-muted transition group-hover:text-text">
											<svg
												xmlns="http://www.w3.org/2000/svg"
												fill="none"
												viewBox="0 0 24 24"
												stroke-width="1.5"
												stroke="currentColor"
												class="h-4 w-4"
											>
												<path
													stroke-linecap="round"
													stroke-linejoin="round"
													d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
											</svg>
										</span>
									</a>
									<a
										href="/resources"
										class="group flex items-center space-x-2 p-3 text-sm text-subtle transition first:rounded-t-xl last:rounded-b-xl hover:bg-muted/20 focus:outline-none focus:ring focus:ring-inset"
									>
										<span class="transition group-hover:text-text">
											Contribute to Rosé Pine
										</span>

										<div class="flex-1"></div>

										<span class="text-muted transition group-hover:text-text">
											<svg
												xmlns="http://www.w3.org/2000/svg"
												fill="none"
												viewBox="0 0 24 24"
												stroke-width="1.5"
												stroke="currentColor"
												class="h-4 w-4"
											>
												<path
													stroke-linecap="round"
													stroke-linejoin="round"
													d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
											</svg>
										</span>
									</a>
								</div>
							</div>
						</template>
						<template
							x-for="(item, index) in commandItemsFiltered"
							:key="'item-' + index"
						>
							<div class="space-y-1 pb-1">
								<template x-if="commandShowCategory(item, index)">
									<div class="overflow-hidden px-1">
										<div
											class="my-1 px-2 py-1 text-xs font-medium text-muted"
											x-text="commandCategoryCapitalize(item.category)"
										>
										</div>
									</div>
								</template>

								<template
									x-if="(item.default && commandSearchIsEmpty()) || !commandSearchIsEmpty()"
								>
									<div class="px-1">
										<a
											:id="item.value + '-' + $id('command')"
											:href="item.href"
											@click="commandItemSelected=item"
											@mousemove="commandItemActive=item"
											:class="{ 'bg-muted/10 text-text' : commandItemIsActive(item) }"
											class="relative flex cursor-default select-none items-center rounded-md px-2 py-2 text-sm text-subtle outline-none backdrop-blur-sm data-[disabled]:pointer-events-none data-[disabled]:opacity-50"
										>
											<span
												x-html="item.icon"
												:class="{ 'text-text' : commandItemIsActive(item) }"
												class="text-muted"></span>
											<span x-text="item.title"></span>
											<p
												:class="{ 'text-text' : commandItemIsActive(item) }"
												class="ml-auto text-xs font-medium text-muted"
											>
												<template x-if="item.href.startsWith('http')">
													<span x-text="new URL(item.href).hostname + ' ↗'"
													></span>
												</template>
												<template x-if="!item.href.startsWith('http')">
													<svg
														xmlns="http://www.w3.org/2000/svg"
														fill="none"
														viewBox="0 0 24 24"
														stroke-width="1.5"
														stroke="currentColor"
														class="h-4 w-4"
													>
														<path
															stroke-linecap="round"
															stroke-linejoin="round"
															d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
													</svg>
												</template>
											</p>
										</a>
									</div>
								</template>
							</div>
						</template>
					</div>
				</div>
			</div>
		</div>
	</template>
</div>
